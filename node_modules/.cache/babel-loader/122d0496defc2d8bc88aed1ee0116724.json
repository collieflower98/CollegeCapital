{"ast":null,"code":"// export const createMemo = (id) => {\n//     return {\n//         type : 'CREATE_MEM',\n//         id : id,\n//     }\n// }\nexport const createMemo = mem => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const userId = getState().firebase.auth.uid;\n    firestore.collection('memos').add({ ...mem,\n      owner: profile.firstName + ' ' + profile.lastName,\n      uid: userId,\n      createdAt: new Date()\n    }).then(() => {\n      dispatch({\n        type: 'CREATE_MEM',\n        mem\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CREATE_FUND_ERR'\n      }, err);\n    });\n  };\n};\nexport const deleteMemo = mem => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const userId = getState().firebase.auth.uid;\n    firestore.collection('memos').doc(mem).delete().then(() => {\n      dispatch({\n        type: 'DELTE_DOC',\n        mem\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CREATE_FUND_ERR'\n      }, err);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/collieflower/Desktop/cc-webapp/src/store/actions/memActions.js"],"names":["createMemo","mem","dispatch","getState","getFirebase","getFirestore","firestore","profile","firebase","userId","auth","uid","collection","add","owner","firstName","lastName","createdAt","Date","then","type","catch","err","deleteMemo","doc","delete"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAO,MAAMA,UAAU,GAAIC,GAAD,IAAS;AAC/B,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAArB,KAAsD;AACzD,UAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,UAAME,OAAO,GAAGJ,QAAQ,GAAGK,QAAX,CAAoBD,OAApC;AACA,UAAME,MAAM,GAAGN,QAAQ,GAAGK,QAAX,CAAoBE,IAApB,CAAyBC,GAAxC;AACAL,IAAAA,SAAS,CAACM,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkC,EAC9B,GAAGZ,GAD2B;AAE9Ba,MAAAA,KAAK,EAAEP,OAAO,CAACQ,SAAR,GAAoB,GAApB,GAA0BR,OAAO,CAACS,QAFX;AAG9BL,MAAAA,GAAG,EAAEF,MAHyB;AAI9BQ,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAJmB,KAAlC,EAKGC,IALH,CAKQ,MAAM;AACVjB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAE,YAAR;AAAsBnB,QAAAA;AAAtB,OAAD,CAAR;AACH,KAPD,EAOGoB,KAPH,CAOUC,GAAD,IAAS;AACdpB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAE;AAAR,OAAD,EAA6BE,GAA7B,CAAR;AACH,KATD;AAUH,GAdD;AAeH,CAhBM;AAkBP,OAAO,MAAMC,UAAU,GAAItB,GAAD,IAAS;AAC/B,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAArB,KAAsD;AACzD,UAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,UAAME,OAAO,GAAGJ,QAAQ,GAAGK,QAAX,CAAoBD,OAApC;AACA,UAAME,MAAM,GAAGN,QAAQ,GAAGK,QAAX,CAAoBE,IAApB,CAAyBC,GAAxC;AACAL,IAAAA,SAAS,CAACM,UAAV,CAAqB,OAArB,EAA8BY,GAA9B,CAAkCvB,GAAlC,EAAuCwB,MAAvC,GAAgDN,IAAhD,CAAqD,MAAM;AACvDjB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAE,WAAR;AAAqBnB,QAAAA;AAArB,OAAD,CAAR;AACH,KAFD,EAEGoB,KAFH,CAEUC,GAAD,IAAS;AACdpB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAE;AAAR,OAAD,EAA6BE,GAA7B,CAAR;AACH,KAJD;AAKH,GATD;AAUH,CAXM","sourcesContent":["// export const createMemo = (id) => {\n//     return {\n//         type : 'CREATE_MEM',\n//         id : id,\n//     }\n\n// }\n\nexport const createMemo = (mem) => {\n    return (dispatch, getState, {getFirebase, getFirestore} ) => {\n        const firestore = getFirestore();\n        const profile = getState().firebase.profile;\n        const userId = getState().firebase.auth.uid;\n        firestore.collection('memos').add({\n            ...mem,\n            owner: profile.firstName + ' ' + profile.lastName,\n            uid: userId,\n            createdAt: new Date()\n        }).then(() => {\n            dispatch({ type: 'CREATE_MEM', mem });\n        }).catch((err) => {\n            dispatch({ type: 'CREATE_FUND_ERR'}, err);\n        })\n    }\n};\n\nexport const deleteMemo = (mem) => {\n    return (dispatch, getState, {getFirebase, getFirestore} ) => {\n        const firestore = getFirestore();\n        const profile = getState().firebase.profile;\n        const userId = getState().firebase.auth.uid;\n        firestore.collection('memos').doc(mem).delete().then(() => {\n            dispatch({ type: 'DELTE_DOC', mem });\n        }).catch((err) => {\n            dispatch({ type: 'CREATE_FUND_ERR'}, err);\n        })\n    }\n};"]},"metadata":{},"sourceType":"module"}